{
  "version": 3,
  "sources": ["../../src/lib/rules.ts"],
  "sourcesContent": ["import * as vm from 'node:vm';\nimport * as SunCalc from 'suncalc';\nimport { Holidays } from './holiday';\n\n/**\n * Wait (sleep) x seconds\n *\n * @param seconds time in seconds\n * @returns void\n */\nexport function wait(seconds: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, seconds * 1000));\n}\n\nfunction getErrorMessage(error: unknown): string {\n    if (error instanceof Error) {\n        return error.message;\n    }\n    return String(error);\n}\n\nexport interface iftime {\n    name: string;\n    from: string;\n    to: string;\n    weekday: string;\n    range?: string;\n    value?: boolean;\n    valueold?: boolean;\n}\n\nexport interface ifstate {\n    name: string;\n    id: string;\n    cmpvalue?: boolean;\n    value?: any;\n    valueold?: any;\n    ack?: boolean;\n    ackold?: boolean;\n}\n\nexport interface ifrule {\n    name: string;\n    query: string;\n    id: string[] | string;\n    delay?: string;\n    value: any;\n}\n\nexport interface ifvalue {\n    timeout?: ioBroker.Timeout;\n    name?: string;\n}\n\nexport interface ifruleset {\n    rulename: string;\n    active: boolean;\n    times: iftime[];\n    states: ifstate[];\n    rules: ifrule[];\n    value: ifvalue;\n}\n\ntype coordinate = {\n    latitude: number;\n    longitude: number;\n};\nclass Ruleset {\n    private ruleset: ifruleset;\n    private latitude: number;\n    private longitude: number;\n    private adapter: any;\n\n    /**\n     * Constructor\n     *\n     * @param ruleset\n     * @param coordinate\n     * @param adapter\n     */\n    public constructor(ruleset: ifruleset, coordinate: coordinate, adapter: any) {\n        this.adapter = adapter;\n        this.ruleset = ruleset;\n        this.ruleset.value = {};\n        this.latitude = coordinate.latitude;\n        this.longitude = coordinate.longitude;\n    }\n\n    public async checkRuleSet(): Promise<boolean> {\n        let ret = true;\n        if (!this.ruleset.active) {\n            return true;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        for (const time of this.ruleset.times) {\n            /* empty */\n        }\n        for (const state of this.ruleset.states) {\n            const obj: any = await this.adapter.getForeignObjectAsync(state.id);\n            if (!obj) {\n                this.adapter.log.error(\n                    `Could not find state id ${state.id} for ${state.name}, ${this.ruleset.rulename}`,\n                );\n                ret = false;\n            }\n        }\n        for (const rule of this.ruleset.rules) {\n            const ids: string[] = typeof rule.id === 'string' ? [rule.id] : rule.id;\n            for (const id of ids) {\n                const obj: any = await this.adapter.getForeignObjectAsync(id);\n                if (!obj) {\n                    this.adapter.log.error(`Could not find rule id ${id} for ${rule.name}, ${this.ruleset.rulename}`);\n                    ret = false;\n                }\n            }\n        }\n        return ret;\n    }\n\n    private delSonderzeichen(text: string): string {\n        return text.trim().replace(/(\\r\\n|\\n|\\r|\\t|\\s)/g, '');\n    }\n\n    private isHoliday(weekdays: string): boolean {\n        const holiday = Holidays.isHolidayToday(this.adapter.config.holiday);\n        const weekdaysarray = this.delSonderzeichen(weekdays).split(',');\n        return weekdaysarray.includes('Hd') && holiday;\n    }\n\n    /**\n     * is weekday\n     *\n     * @param weekdays for Excample Sa. So, ....\n     * @returns\n     */\n    private inWeekday(weekdays: string): boolean {\n        const now = new Date();\n        const day = now.getDay();\n        const weekdaynow = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'][day];\n        // if string like 'sa','so','mo' convert to array [ 'sa', 'so', 'mo']\n        const weekdaysarray = this.delSonderzeichen(weekdays).split(',');\n        // checks if today in weekday array\n        return weekdaysarray.includes(weekdaynow);\n    }\n\n    /**\n     * Is time between hh:mm and hh:mm\n     * Excmple 10:00,12:00,11:00 => true\n     * Example 10:00,12:00,08:00 => false\n     *\n     * @param startTime time hh:mm\n     * @param endTime time hh:mm\n     * @param time time hh:mm\n     * @returns true or false\n     */\n    private isTimeBetween(startTime: string, endTime: string, time?: string): boolean {\n        const toSeconds = (t: string): number => {\n            const [hours = 0, minutes = 0, seconds = 0] = t.split(':').map(Number);\n            return hours * 3600 + minutes * 60 + seconds;\n        };\n        if (!time) {\n            const now = new Date();\n            time = now.toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit', second: '2-digit' });\n        }\n        const timeSeconds = toSeconds(time);\n        const startSeconds = toSeconds(startTime);\n        const endSeconds = toSeconds(endTime);\n        return timeSeconds >= startSeconds && timeSeconds <= endSeconds;\n    }\n\n    /**\n     * Seconds to array hours, minutes, seconds\n     *\n     * @param seconds\n     * @returns\n     */\n    private secToTimeArray(seconds: number): [hours: number, minutes: number, seconds: number] {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const second = seconds % 60;\n        return [hours, minutes, second];\n    }\n\n    /**\n     * hours, minutes, seconds to timestring HH:MM:SS\n     *\n     * @param hours hours\n     * @param minutes minutes\n     * @param seconds seconds\n     */\n    private getTimeString(hours: number, minutes: number, seconds: number): string {\n        return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n    }\n\n    /**\n     * Time between a range. Example 10:00,20:00 => 12:45\n     *\n     * @param timeRange timestring hh:mm,hh:mm\n     * @returns time hh:mm\n     */\n    private getRandomTimeBetween(timeRange: string): string {\n        if (!timeRange.includes(',')) {\n            return timeRange;\n        }\n        const [start, end] = timeRange.split(',').map(time => {\n            time = this.addOrSubtractTime(time);\n            const [hours = 0, minutes = 0, seconds = 0] = time.split(':').map(Number);\n            return hours * 3600 + minutes * 60 + seconds; // Sekunden seit Tagesbeginn\n        });\n        const randomSeconds = Math.floor(Math.random() * (end - start + 1)) + start;\n        const [hours, minutes, seconds] = this.secToTimeArray(randomSeconds);\n        return this.getTimeString(hours, minutes, seconds);\n    }\n\n    /**\n     * Add subtract timestring hh:mm+hh:mm or hh:mm-hh:mm\n     *\n     * @param time hh:mm or hh:mm+hh:mm or hh:mm-hh:mm\n     * @returns hh:mm\n     */\n    private addOrSubtractTime(time: string): string {\n        let time1 = '';\n        let time2 = '';\n        let operation: '+' | '-' | undefined = undefined;\n        if (time.includes('+')) {\n            operation = '+';\n            [time1, time2] = time.split('+').map(String);\n        }\n        if (time.includes('-')) {\n            operation = '-';\n            [time1, time2] = time.split('-').map(String);\n        }\n        if (operation === undefined) {\n            return this.getTimefromSuncalc(time);\n        }\n        const [h1 = 0, m1 = 0, s1 = 0] = this.getTimefromSuncalc(time1).split(':').map(Number);\n        const [h2 = 0, m2 = 0, s2 = 0] = this.getTimefromSuncalc(time2).split(':').map(Number);\n        let totalSeconds = h1 * 3600 + m1 * 60 + s1;\n        const secondsToAddOrSubtract = h2 * 3600 + m2 * 60 + s2;\n        totalSeconds =\n            operation === '+' ? totalSeconds + secondsToAddOrSubtract : totalSeconds - secondsToAddOrSubtract;\n        // Stellen sicher, dass das Ergebnis im Bereich 0-86400 Sekunden (0-23h) bleibt\n        totalSeconds = (totalSeconds + 86400) % 86400;\n        const [hours, minutes, seconds] = this.secToTimeArray(totalSeconds);\n        return this.getTimeString(hours, minutes, seconds);\n    }\n\n    /**\n     * Suncalc, Example: sunrise => 07:01\n     *\n     * @param time sunrise, sunset, ...\n     * @returns time as hh:mm:ss\n     */\n    private getTimefromSuncalc(time: string): string {\n        try {\n            const suncalc = SunCalc.getTimes(new Date(), this.latitude, this.longitude);\n            const suncalctime = suncalc[time as keyof SunCalc.GetTimesResult];\n            return suncalctime.toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit', second: '2-digit' });\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        } catch (err) {\n            return time;\n        }\n    }\n\n    /**\n     * Checks if time rule is true / or false\n     *\n     * @param timename name of the time rule\n     * @returns boolean\n     */\n    public checkTIme(timename: string): boolean {\n        const timerule = this.ruleset.times.find(item => item.name === timename);\n        if (!timerule) {\n            return false;\n        }\n        const inweekday = this.inWeekday(timerule.weekday);\n        const isholiday = this.isHoliday(timerule.weekday);\n        const intime = this.isTimeBetween(\n            this.getRandomTimeBetween(timerule.from),\n            this.getRandomTimeBetween(timerule.to),\n        );\n        return (inweekday || isholiday) && intime;\n    }\n\n    /**\n     * Delay in seconds 00:00:05,00:00:10 -> 6\n     *\n     * @param time  like 00:00:05,00:00:10\n     * @returns seconds\n     */\n    private delayInSeconds(time: string): number {\n        const randomDelayTime = this.getRandomTimeBetween(time);\n        const [h = 0, m = 0, s = 0] = randomDelayTime.split(':').map(Number);\n        const totalSeconds = h * 3600 + m * 60 + s;\n        return totalSeconds;\n    }\n\n    /**\n     * if two objects, numbers, arrays are equal\n     *\n     * @param a any kind of object, number, string\n     * @param b any kind of object, number, string\n     * @returns boolean\n     */\n    private isEquivalent(a: any, b: any): boolean {\n        if (typeof a === 'object' && typeof b === 'object') {\n            // Create arrays of property names\n            const aProps = Object.getOwnPropertyNames(a);\n            const bProps = Object.getOwnPropertyNames(b);\n            // If number of properties is different,\n            // objects are not equivalent\n            if (aProps.length != bProps.length) {\n                return false;\n            }\n            for (let i = 0; i < aProps.length; i++) {\n                const propName = aProps[i];\n                // If values of same property are not equal,\n                // objects are not equivalent\n                if (a[propName] !== b[propName]) {\n                    return false;\n                }\n            }\n            // If we made it this far, objects\n            // are considered equivalent\n            return true;\n        }\n        return a == b ? true : false;\n    }\n\n    private unregisterStates(): void {\n        for (const state of this.ruleset.states) {\n            this.adapter.unsubscribeForeignStates(state.id);\n            state.value = undefined;\n            state.valueold = undefined;\n        }\n    }\n\n    public async registeStates(): Promise<void> {\n        for (const state of this.ruleset.states) {\n            if (this.ruleset.active) {\n                const found = this.ruleset.rules.find(rule => rule.query.search(`${state.name}.`) >= 0) !== undefined;\n                if (found) {\n                    state.value = (await this.adapter.getForeignStateAsync(state.id)).val;\n                    state.ack = (await this.adapter.getForeignStateAsync(state.id)).ack;\n                    this.adapter.log.info(`Subscribe Id ${state.id}`);\n                    this.adapter.subscribeForeignStates(state.id);\n                }\n            }\n        }\n    }\n\n    public async sandbox(): Promise<void> {\n        const context: vm.Context = {};\n        if (!this.ruleset.active) {\n            return;\n        }\n        for (const time of this.ruleset.times) {\n            context[time.name] = {\n                v: time.value,\n                ov: time.valueold,\n            };\n        }\n        for (const state of this.ruleset.states) {\n            context[state.name] = {\n                v: state.cmpvalue !== undefined ? this.isEquivalent(state.value, state.cmpvalue) : state.value,\n                ov: state.cmpvalue !== undefined ? this.isEquivalent(state.valueold, state.cmpvalue) : state.valueold,\n                a: state.ack,\n                oa: state.ackold,\n            };\n        }\n        for (const rule of this.ruleset.rules) {\n            try {\n                const result = vm.runInNewContext(rule.query, context);\n                if (result) {\n                    if (rule.name === this.ruleset.value.name) {\n                        return;\n                    }\n                    this.ruleset.value.name = rule.name;\n                    const delay = rule.delay === undefined ? 0 : this.delayInSeconds(rule.delay);\n                    const ids: string[] = typeof rule.id === 'string' ? [rule.id] : rule.id;\n                    for (const id of ids) {\n                        if (delay > 0) {\n                            this.adapter.log.info(\n                                `${this.ruleset.rulename} : Plan Set ${rule.name}, ${id} value to ${rule.value} in ${delay} seconds`,\n                            );\n                        }\n                        this.adapter.clearTimeout(this.ruleset.value.timeout);\n                        this.ruleset.value.timeout = this.adapter.setTimeout(async () => {\n                            const statevalue = (await this.adapter.getForeignStateAsync(id)).val;\n                            const stateack = (await this.adapter.getForeignStateAsync(id)).ack;\n                            if (!this.adapter.config.simulation) {\n                                this.adapter.log.info(\n                                    `${this.ruleset.rulename} : Set ${rule.name}, ${id} value change from ${statevalue} to ${rule.value} (${stateack} to false)`,\n                                );\n                                await this.adapter.setForeignStateAsync(id, { val: rule.value, ack: false });\n                            } else {\n                                this.adapter.log.info(\n                                    `${this.ruleset.rulename} : Simulation Set ${rule.name}, ${id} value change from ${statevalue} to ${rule.value} (${stateack} to false)`,\n                                );\n                            }\n                        }, delay * 1000);\n                        await this.setStates({\n                            name: rule.name,\n                            id: id,\n                            value: rule.value,\n                            query: rule.query,\n                            context: context,\n                        });\n                    }\n                    // Firt macht we stop\n                    return;\n                }\n            } catch (err) {\n                this.adapter.log.error(`Error in ${this.ruleset.rulename}: ${getErrorMessage(err)}`);\n            }\n        }\n        this.adapter.log.debug(`${this.ruleset.rulename} : No rule found. Nothing will be changed.`);\n    }\n\n    public setRuleTime(): void {\n        for (const time of this.ruleset.times) {\n            time.valueold = time.value;\n            time.value = this.checkTIme(time.name);\n            this.adapter.log.debug(\n                `${this.ruleset.rulename} : ${time.name} - new in time: ${time.value}, old in time: ${time.valueold}`,\n            );\n        }\n    }\n\n    public setRuleStates(id: string, statechange: any): void {\n        if (!id || !statechange || !this.ruleset.active) {\n            return;\n        }\n        const state = this.ruleset.states.find(item => item.id === id);\n        if (!state) {\n            return;\n        }\n        state.valueold = state.value;\n        state.value = statechange.val;\n        state.ackold = state.ack;\n        state.ack = statechange.ack;\n        this.adapter.log.debug(\n            `${this.ruleset.rulename} : ${state.name} - new state: ${state.value} (${state.ack}), old state: ${state.valueold} (${state.ackold})`,\n        );\n    }\n\n    private async setStates(result: {\n        name: string;\n        id: string;\n        value: any;\n        query: string;\n        context: any;\n    }): Promise<void> {\n        try {\n            const id = `${this.adapter.namespace}.rules.${this.ruleset.rulename.replace(/[^0-9a-zA-Z]/g, '')}`;\n            await this.adapter.setState(`${id}.rule`, { val: result.name, ack: true });\n            await this.adapter.setState(`${id}.value`, { val: result.value, ack: true });\n            await this.adapter.setState(`${id}.id`, { val: result.id, ack: true });\n            await this.adapter.setState(`${id}.query`, { val: result.query, ack: true });\n            const context =\n                typeof result.context === 'object' ? JSON.stringify(result.context) : result.context.toString();\n            await this.adapter.setState(`${id}.context`, { val: context, ack: true });\n        } catch (err) {\n            this.adapter.log.error(`Error setting States in ${this.ruleset.rulename}: ${getErrorMessage(err)}`);\n        }\n    }\n}\n\nexport class Rulesets {\n    private adapter: any;\n    private coordinate: coordinate;\n    private rulesets!: {\n        rulename: string;\n        ruleset: Ruleset;\n    }[];\n\n    public constructor(coordinate: coordinate, adapter: any) {\n        this.adapter = adapter;\n        this.coordinate = coordinate;\n        this.rulesets = [];\n    }\n\n    public async add(rule: ifruleset): Promise<void> {\n        this.del(rule.rulename);\n        const ruleset = new Ruleset(rule, this.coordinate, this.adapter);\n        this.adapter.log.info(`Add ruleset ${rule.rulename}`);\n        if (await ruleset.checkRuleSet()) {\n            this.rulesets.push({\n                rulename: rule.rulename,\n                ruleset: ruleset,\n            });\n            await ruleset.registeStates();\n            ruleset.setRuleTime();\n            await ruleset.sandbox();\n        }\n    }\n\n    public del(rulename: string): void {\n        if (this.rulesets.length <= 0) {\n            return;\n        }\n        if (rulename === '*') {\n            this.adapter.log.info(`Delete all rulesets`);\n            this.rulesets = [];\n        } else {\n            const index = this.rulesets.findIndex(item => item.rulename === rulename);\n            if (index >= 0) {\n                this.adapter.log.info(`Delete ruleset ${rulename}`);\n                this.rulesets.splice(index, 1);\n            }\n        }\n    }\n\n    public exist(rulname: string): boolean {\n        const ruleset = this.rulesets.find(item => item.rulename === rulname);\n        return ruleset ? true : false;\n    }\n\n    public async listenStates(): Promise<void> {\n        await Holidays.setHolidaysSet();\n        Holidays.pollHolidays();\n        // eslint-disable-next-line @typescript-eslint/require-await\n        this.adapter.log.debug(`Listen to state changes`);\n        this.adapter.on('stateChange', async (id: string, statechange: any): Promise<void> => {\n            for (const ruleset of this.rulesets) {\n                ruleset.ruleset.setRuleStates(id, statechange);\n                ruleset.ruleset.setRuleTime();\n                await ruleset.ruleset.sandbox();\n                this.adapter.log.debug(\n                    `${ruleset.rulename} : Event called for ${id}, ${statechange.val} (ack = ${statechange.ack})`,\n                );\n            }\n        });\n        this.adapter.log.debug(`Schedule state changes`);\n        const schedule = async (delay: number): Promise<void> => {\n            for (const ruleset of this.rulesets) {\n                ruleset.ruleset.setRuleTime();\n                await ruleset.ruleset.sandbox();\n                this.adapter.log.debug(`${ruleset.rulename} : Time scheduler called`);\n            }\n            this.adapter.setTimeout(async () => await schedule(delay), delay * 1000);\n        };\n        await schedule(this.adapter.config.pollInterval);\n    }\n}\n"],
  "mappings": "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",
  "names": ["hours", "minutes", "seconds"]
}
