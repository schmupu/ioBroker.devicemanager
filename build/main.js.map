{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport type { ifruleset } from './lib/rules';\n// eslint-disable-next-line no-duplicate-imports\nimport { Rulesets } from './lib/rules';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\n/**\n * Wait (sleep) x seconds\n *\n * @param seconds time in seconds\n * @returns void\n */\nexport function wait(seconds: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, seconds * 1000));\n}\n\n/**\n * Error Message\n *\n * @param error error\n * @returns Message\n */\nfunction getErrorMessage(error: unknown): string {\n    if (error instanceof Error) {\n        return error.message;\n    }\n    return String(error);\n}\n\nclass Devicemanager extends utils.Adapter {\n    private rulessets: Rulesets | undefined;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'devicemanager',\n        });\n        this.on('ready', this.onReady.bind(this));\n        // this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        if (!this.config.simulation) {\n            this.log.info(`Starting Adapter ${this.namespace} in version ${this.version}`);\n        } else {\n            this.log.info(`Starting Adapter ${this.namespace} in version ${this.version} in simulation mode`);\n        }\n        const coordinate = await this.getCoordnatesAsync();\n        if (!this.rulessets) {\n            this.rulessets = new Rulesets(coordinate, this);\n            await this.rulessets.listenStates();\n        }\n        const rules = await this.getStatesOfAsync(`${this.namespace}.rules`);\n        for (const rule of rules) {\n            if (rule._id.endsWith('ruleset')) {\n                try {\n                    const regel = (await this.getForeignStateAsync(rule._id))?.val?.toString();\n                    if (regel) {\n                        await this.rulessets.add(JSON.parse(regel));\n                    }\n                } catch (err) {\n                    this.log.error(`Error starting rulesets: ${getErrorMessage(err)}`);\n                }\n            }\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     *\n     * @param callback callback\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            callback();\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        } catch (e) {\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     *\n     * @param id id\n     * @param state state\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    /**\n     * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n     * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n     *\n     * @param obj ivhwxr\n     */\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\n        if (!this.rulessets) {\n            const coordinate = await this.getCoordnatesAsync();\n            this.rulessets = this.rulessets ? this.rulessets : new Rulesets(coordinate, this);\n            await this.rulessets.listenStates();\n        }\n        if (typeof obj === 'object' && obj.message) {\n            switch (obj.command) {\n                case 'add': {\n                    if (obj.message) {\n                        this.log.info(`Add Rule : ${obj.message.rulename}`);\n                        await this.addObjectAsync(obj.message);\n                        await this.rulessets.add(obj.message);\n                    }\n                    this.sendTo(obj.from, obj.command, `Add Rule ${obj.message.rulename}`, obj.callback);\n                    break;\n                }\n                case 'delete': {\n                    const rulename = typeof obj.message === 'string' ? obj.message : obj.message.rulename;\n                    this.log.info(`Delete Rule : ${rulename}`);\n                    this.rulessets.del(rulename);\n                    await this.deleteObjectAsync(rulename);\n                    this.sendTo(obj.from, obj.command, `Delete Rule ${rulename}`, obj.callback);\n                    break;\n                }\n                default: {\n                    this.sendTo(obj.from, obj.command, `Command ${obj.command} unknown`, obj.callback);\n                }\n            }\n        } else {\n            this.sendTo(obj.from, obj.command, `Command ${obj.command} unknown`, obj.callback);\n        }\n    }\n\n    private async getCoordnatesAsync(): Promise<{ latitude: number; longitude: number }> {\n        try {\n            const states: any = await this.getForeignObjectAsync('system.config');\n            if (\n                states &&\n                states.common &&\n                states.common.latitude !== undefined &&\n                states.common.longitude !== undefined\n            ) {\n                return { latitude: states.common.latitude, longitude: states.common.longitude };\n            }\n            throw new Error(`Could not get coordinates!`);\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        } catch (error) {\n            throw new Error(`Could not get coordinates!`);\n        }\n    }\n\n    private async deleteObjectAsync(rulename: string): Promise<void> {\n        try {\n            const id =\n                rulename === '*'\n                    ? `${this.namespace}.rules`\n                    : `${this.namespace}.rules.${rulename.replace(/[^0-9a-zA-Z]/g, '')}`;\n            await this.delObjectAsync(id, { recursive: true });\n        } catch (err) {\n            this.log.error(`Error deleting Objects in ${rulename}: ${getErrorMessage(err)}`);\n        }\n    }\n\n    private async addObjectAsync(ruleset: ifruleset): Promise<void> {\n        try {\n            const id = `${this.namespace}.rules.${ruleset.rulename.replace(/[^0-9a-zA-Z]/g, '')}`;\n            await this.setObjectNotExistsAsync(`${id}.rulename`, {\n                type: 'state',\n                common: {\n                    name: `${ruleset.rulename} - Rulename`,\n                    type: 'string',\n                    role: 'value',\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            });\n            await this.setState(`${id}.rulename`, { val: ruleset.rulename, ack: true });\n            await this.setObjectNotExistsAsync(`${id}.active`, {\n                type: 'state',\n                common: {\n                    name: `${ruleset.rulename} - Active`,\n                    type: 'boolean',\n                    role: 'value',\n                    read: true,\n                    write: true,\n                },\n                native: {},\n            });\n            await this.setState(`${id}.active`, { val: ruleset.active, ack: true });\n            await this.setObjectNotExistsAsync(`${id}.ruleset`, {\n                type: 'state',\n                common: {\n                    name: `${ruleset.rulename} - Ruleset`,\n                    type: 'string',\n                    role: 'value',\n                    read: true,\n                    write: true,\n                },\n                native: {},\n            });\n            await this.setState(`${id}.ruleset`, { val: JSON.stringify(ruleset), ack: true });\n            await this.setObjectNotExistsAsync(`${id}.rule`, {\n                type: 'state',\n                common: {\n                    name: `${ruleset.rulename} - Rule`,\n                    type: 'string',\n                    role: 'value',\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            });\n            await this.setObjectNotExistsAsync(`${id}.value`, {\n                type: 'state',\n                common: {\n                    name: `${ruleset.rulename} - Value`,\n                    type: 'mixed',\n                    role: 'value',\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            });\n            await this.setObjectNotExistsAsync(`${id}.id`, {\n                type: 'state',\n                common: {\n                    name: `${ruleset.rulename} - Id`,\n                    type: 'string',\n                    role: 'value',\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            });\n            await this.setObjectNotExistsAsync(`${id}.query`, {\n                type: 'state',\n                common: {\n                    name: `${ruleset.rulename} - Sandbox Query`,\n                    type: 'string',\n                    role: 'value',\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            });\n            await this.setObjectNotExistsAsync(`${id}.context`, {\n                type: 'state',\n                common: {\n                    name: `${ruleset.rulename} - Sandbox Context`,\n                    type: 'string',\n                    role: 'value',\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            });\n        } catch (err) {\n            this.log.error(`Error creating Objects in ${ruleset.rulename}: ${getErrorMessage(err)}`);\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Devicemanager(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Devicemanager())();\n}\n"],
  "mappings": "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",
  "names": []
}
